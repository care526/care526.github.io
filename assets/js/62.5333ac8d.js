(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{526:function(e,t,a){"use strict";a.r(t);var n=a(32),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"other"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#other"}},[e._v("#")]),e._v(" other")]),e._v(" "),a("h2",{attrs:{id:"nvm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nvm"}},[e._v("#")]),e._v(" nvm")]),e._v(" "),a("p",[e._v("安装：nvm install 4.4.5\n设置默认: nvm alias default 4.4.5\n切换版本：nvm use 6\n列出当前本地版本：nvm ls\n列出远端可安装版本：nvm ls-remote")]),e._v(" "),a("p",[e._v("create-react-app命令\nnpm start    开始项目\nnpm run build   在build文件夹生成上线文件\nnpm install   加载node_modules")]),e._v(" "),a("h2",{attrs:{id:"npm-install-save-安装用于发布到生产环境的安装包npm-install-save-dev-安装用于开发环境的安装包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#npm-install-save-安装用于发布到生产环境的安装包npm-install-save-dev-安装用于开发环境的安装包"}},[e._v("#")]),e._v(" npm install --save   安装用于发布到生产环境的安装包\nnpm install --save-dev　安装用于开发环境的安装包")]),e._v(" "),a("p",[e._v('var http = require("http")  引用模块\nvar url = require("url")')]),e._v(" "),a("p",[e._v('var server = http.createServer(function(request,response){\nxxxxxxxxxxxx代码\n}).listen(3000,"127.0.0.1")')]),e._v(" "),a("p",[e._v("response.writeHead(statusCode[, statusMessage][, headers])  用来设置响应头")]),e._v(" "),a("p",[e._v("response.end()  表示相应结束")]),e._v(" "),a("p",[e._v("request.url 属性,返回,当前的url网址\nurl.parse(xxx,[true]) 可拆解当前的url  true:返回的是个对象\n还有.pathname .query .hash .slashes 属性")]),e._v(" "),a("p",[e._v("fs.readFile(filename,function(err,data){})")]),e._v(" "),a("p",[e._v("异步变为同步,使用匿名函数的递归方法")]),e._v(" "),a("p",[e._v("模块\nexports.XXX = 属性;\nexports.XXX = 方法;\nmodule.export = {};")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("Node.js 不是一门语言也不是框架，它只是基于 Google V8 引擎的 JavaScript 运行时环境\n使得 JavaScript 能够同时具有 DOM 操作(浏览器)和 I/O、文件读写、操作数据库(服务器端)等能力，是目前最简单的全栈式语言\nNode.js通常被用来开发低延迟的网络应用，也就是那些需要在服务器端环境和前端实时收集和交换数据的应用（API、即时聊天、微服务）\nCallback、Promise 到 Async函数")]),e._v(" "),a("p",[e._v("模块系统\n在node中内置了一些核心模块，可通过模块名直接引用\n用npm安装的模块包，也可直接通过包名引用\n引用本地js模块文件，需添加绝度路径或相对路径\nvar http = require(‘http’);  //引入http模块\nexports.name = ‘care’;  //为暴露的对象添加属性\nexports.getnName = function(){};  //也可以是函数等\nmodule.exports = Persion;  //重写module.exports，默认为一个空对象{}\nfunction Persion (name) { this.name = name; }\nPersion.prototype.talk = function () { console.log(this.name); }")]),e._v(" "),a("h2",{attrs:{id:"流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#流"}},[e._v("#")]),e._v(" 流")]),e._v(" "),a("p",[e._v("流可以是可读的、可写的、或者可读可写的。 所有的流都是 EventEmitter 的实例\nconst stream = require('stream');")]),e._v(" "),a("p",[e._v("Node.js 中有四种基本的流类型：\nWritable - 可写入数据的流（例如 fs.createWriteStream()）。\nReadable - 可读取数据的流（例如 fs.createReadStream()）。\nDuplex - 可读又可写的流（例如 net.Socket）。\nTransform - 在读写过程中可以修改或转换数据的 Duplex 流（例如 zlib.createDeflate()）。")]),e._v(" "),a("h2",{attrs:{id:"接收参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接收参数"}},[e._v("#")]),e._v(" 接收参数")]),e._v(" "),a("p",[a("code",[e._v("node a.js a=1 b=2 c=3")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// node a.js a=1 b=2 c=3\n// a.js\nconsole.log(process.argv.splice(2))\n// ['a=1', 'b=2', 'c=3']\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);