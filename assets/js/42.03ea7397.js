(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{505:function(t,e,o){"use strict";o.r(e);var r=o(32),a=Object(r.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"object"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[t._v("#")]),t._v(" Object")]),t._v(" "),o("h2",{attrs:{id:"键"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#键"}},[t._v("#")]),t._v(" 键")]),t._v(" "),o("p",[t._v("只接收两种类型的键名 String 和 Symbol"),o("br"),t._v("\n对象/正则无法用作键名，会报错"),o("br"),t._v("\n使用其他类型的键名，但是最终 JavaScript 都会隐式转换为字符串"),o("br"),t._v("\n如Object会被转成 [object Object]")]),t._v(" "),o("h3",{attrs:{id:"object-create-proto-descriptors-返回一个新对象"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#object-create-proto-descriptors-返回一个新对象"}},[t._v("#")]),t._v(" Object.create(proto,descriptors) <返回一个新对象>")]),t._v(" "),o("p",[t._v("使用指定对象来创建一个对象（可用于继承）"),o("br"),t._v("\nproto是要继承的对象，也可以是null，返回一个继承Object的对象"),o("br"),t._v("\ndescriptors是可选的，添加自有的属性，这个参数是个对象，会让返回的新对象拥有这个对象的所有属性。")]),t._v(" "),o("h3",{attrs:{id:"object-defineproperty-o-name-descriptors-返回对象o-改变了原对象o"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#object-defineproperty-o-name-descriptors-返回对象o-改变了原对象o"}},[t._v("#")]),t._v(" Object.defineProperty(o,name,descriptors) <返回对象o，改变了原对象o>")]),t._v(" "),o("p",[t._v("创建或配置对象的一个属性（没有就创建，有就配置改写）"),o("br"),t._v("\no：对象"),o("br"),t._v("\nname：对象的属性名"),o("br"),t._v("\ndescriptors：属性描述符对象(没有指定的属性，对应的属性值将设置为false或null)"),o("br"),t._v("\nObject.defineProperty(people, age, {"),o("br"),t._v("\nvalue: v, writable: false, enumerable: true, configurable: false"),o("br"),t._v("\n//值 可读写 可枚举 可配置"),o("br"),t._v("\n})"),o("br"),t._v("\nObject.defineProperty(people,age,{"),o("br"),t._v("\nget: function () {} | undefined, //当设置了get/set方法时，value和writable不能使用"),o("br"),t._v("\nset: function () {} | undefined,"),o("br"),t._v("\nenumerable: true,"),o("br"),t._v("\nconfigurable: false"),o("br"),t._v("\n})")]),t._v(" "),o("h3",{attrs:{id:"object-defineproperties-o-descriptors-返回对象o-改变了原对象o"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#object-defineproperties-o-descriptors-返回对象o-改变了原对象o"}},[t._v("#")]),t._v(" Object.defineProperties(o,descriptors) <返回对象o，改变了原对象o>")]),t._v(" "),o("p",[t._v("创建或配置对象的多个属性（没有就创建，有就配置改写）"),o("br"),t._v("\n详情同Object.defineProperty方法，但可配置多个属性"),o("br"),t._v("\nObject.defineProperties(people,{"),o("br"),t._v("\nx: { value: v, writable: false, enumerable: true, configurable: false }"),o("br"),t._v("\ny: { value: v, writable: false, enumerable: true, configurable: false }"),o("br"),t._v("\n//值 可读写 可枚举 可配置"),o("br"),t._v("\n})")]),t._v(" "),o("h3",{attrs:{id:"object-freeze-o-返回对象o-改变了原对象o"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#object-freeze-o-返回对象o-改变了原对象o"}},[t._v("#")]),t._v(" Object.freeze(o) <返回对象o，改变了原对象o>")]),t._v(" "),o("p",[t._v("将一个对象设置为不可改变的"),o("br"),t._v("\n这意味着不能向对象o添加新属性，同时已有的属性不能设置或删除。一旦冻结，就不能解冻。"),o("br"),t._v("\nObject.isFrozen(o) <返回bool，不改变原对象o>"),o("br"),t._v("\n检测对象是否可改变，没冻结返回true，冻结了返回false"),o("br"),t._v("\nps：冻结对象的两种方法"),o("br"),t._v("\n1，将对象传入Object.freeze()"),o("br"),t._v("\n2，将对象传入Object.preventExtensions()，设为不可扩展。再用Object.defineProperty()将它所有的属性设置为只读且不可删除的。")]),t._v(" "),o("h3",{attrs:{id:"object-seal-o-返回对象o-改变了原对象o"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#object-seal-o-返回对象o-改变了原对象o"}},[t._v("#")]),t._v(" Object.seal(o) <返回对象o，改变了原对象o>")]),t._v(" "),o("p",[t._v("阻止添加或删除对象的属性（封闭对象，不可解封）"),o("br"),t._v("\nps：与freeze不同的是，对象的属性值可以修改")]),t._v(" "),o("h3",{attrs:{id:"object-isseal-o-返回bool-不改变原对象o"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#object-isseal-o-返回bool-不改变原对象o"}},[t._v("#")]),t._v(" Object.isseal(o) <返回bool，不改变原对象o>")]),t._v(" "),o("p",[t._v("判断一个对象的属性是否可以添加或删除，返回 true / false")]),t._v(" "),o("h3",{attrs:{id:"object-getownpropertydescriptor-o-name-返回描述符对象-不改变原对象o"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertydescriptor-o-name-返回描述符对象-不改变原对象o"}},[t._v("#")]),t._v(" Object.getOwnPropertyDescriptor(o,name) <返回描述符对象，不改变原对象o>")]),t._v(" "),o("p",[t._v("name：对象的一个属性名，也可以是数组的索引"),o("br"),t._v("\n查询对象的一个属性的特性，返回该属性的描述符对象。若属性不存在，返回undefined")]),t._v(" "),o("h3",{attrs:{id:"object-getownpropertynames-o-返回数组-不改变原对象o"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertynames-o-返回数组-不改变原对象o"}},[t._v("#")]),t._v(" Object.getOwnPropertyNames(o) <返回数组，不改变原对象o>")]),t._v(" "),o("p",[t._v("一个包含对象o的所有非继承属性的名字的数组，包括对象的不可枚举的属性"),o("br"),t._v("\nObject.getPropertypeOf(o) <返回一个对象，不改变原对象o>"),o("br"),t._v("\n返回一个对象的原型"),o("br"),t._v("\nps：继承自Object对象的对象的原型是Object.prototype")]),t._v(" "),o("h3",{attrs:{id:"object-hasownproperty-propname-返回bool-不改变原对象o"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#object-hasownproperty-propname-返回bool-不改变原对象o"}},[t._v("#")]),t._v(" Object.hasOwnProperty(propname) <返回bool，不改变原对象o>")]),t._v(" "),o("p",[t._v("检查对象的一个属性是否是继承的，没有这个属性就返回false"),o("br"),t._v("\npropname：对象属性名的字符串"),o("br"),t._v('\npeople.hasOwnProperty("age"); // true')]),t._v(" "),o("h3",{attrs:{id:"object-preventextensible-o-返回对象o-改变了原对象o"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#object-preventextensible-o-返回对象o-改变了原对象o"}},[t._v("#")]),t._v(" Object.preventExtensible(o) <返回对象o，改变了原对象o>")]),t._v(" "),o("p",[t._v("禁止在对象上添加新的属性（但是不影响原型链，可以获得新的继承属性）"),o("br"),t._v("\n一旦设置为不可扩展的，就不能改为可扩展的了")]),t._v(" "),o("h3",{attrs:{id:"object-isextensible-o-返回bool-不改变原对象o"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#object-isextensible-o-返回bool-不改变原对象o"}},[t._v("#")]),t._v(" Object.isExtensible(o) <返回bool，不改变原对象o>")]),t._v(" "),o("p",[t._v("判断对象上是否可以添加新属性，可以返回true，不可以返回false")]),t._v(" "),o("h3",{attrs:{id:"object-isprototypeof-o-返回bool-不改变原对象o"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#object-isprototypeof-o-返回bool-不改变原对象o"}},[t._v("#")]),t._v(" Object.isPrototypeOf(o) <返回bool，不改变原对象o>")]),t._v(" "),o("p",[t._v("判断当前对象是否为另一个对象的原型"),o("br"),t._v("\nvar o = new Object();"),o("br"),t._v("\nObject.prototype.isPrototypeOf(o); // true")]),t._v(" "),o("h3",{attrs:{id:"object-keys-o-返回数组-不改变原对象o"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#object-keys-o-返回数组-不改变原对象o"}},[t._v("#")]),t._v(" Object.keys(o) <返回数组，不改变原对象o>")]),t._v(" "),o("p",[t._v("返回对象的自有的可枚举属性名")]),t._v(" "),o("h3",{attrs:{id:"object-propertylsenumerable-propname-返回bool-不改变原对象o"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#object-propertylsenumerable-propname-返回bool-不改变原对象o"}},[t._v("#")]),t._v(" Object.propertylsEnumerable(propname) <返回bool，不改变原对象o>")]),t._v(" "),o("p",[t._v("检测某个属性是否在 for/in 循环中可见（不检查原型链）"),o("br"),t._v("\npropname：对象指定属性名的字符串"),o("br"),t._v("\nps：那些内置对象的预定义的属性（如方法）通常不可枚举，由JS代码添加的属性是可枚举的"),o("br"),t._v("\n没有可用于测试继承属性的可枚举型的直接方法")]),t._v(" "),o("h3",{attrs:{id:"object-setprototypeof-obj-prototype-null-设置obj对象的原型对象"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#object-setprototypeof-obj-prototype-null-设置obj对象的原型对象"}},[t._v("#")]),t._v(" Object.setPrototypeOf(obj, prototype | null) <设置obj对象的原型对象>")]),t._v(" "),o("div",{staticClass:"language-js extra-class"},[o("pre",{pre:!0,attrs:{class:"language-js"}},[o("code",[o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将A设置为a的原型对象")]),t._v("\nObject"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPrototypeOf")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),o("h2",{attrs:{id:"检测是否是对象"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#检测是否是对象"}},[t._v("#")]),t._v(" 检测是否是对象")]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("obj instanceof Array  // 数组的构造函数\narr.constructor === Object  // 对象的构造函数\nObject.prototype.toString.call(obj)  // '[object Object]'\n")])])]),o("h2",{attrs:{id:"检测是否是空对象"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#检测是否是空对象"}},[t._v("#")]),t._v(" 检测是否是空对象")]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("JSON.stringify(obj) === '{}'\nObject.getOwnPropertyNames(obj).length === 0\nObject.keys(obj).length\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);