(window.webpackJsonp=window.webpackJsonp||[]).push([[166],{633:function(t,n,s){"use strict";s.r(n);var e=s(32),a=Object(e.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"py流程控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#py流程控制"}},[t._v("#")]),t._v(" py流程控制")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/local/bin/python3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -*- coding: UTF-8 -*-")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 条件语句")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# flag = False")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# name = 'care'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# if name == 'python':")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     flag = True")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     print 'welcome boss'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# elif name == 'care':")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     print 'care'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# else:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     print name  ")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# while循环")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# count = 0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# while count < 9 :")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    print 'The count is:', count")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    count = count + 1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# #")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# count = 0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# while count < 9:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     print 'The count is:', count")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     count = count + 1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# else:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     print 1  # 结束循环的时候会执行一次")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# #")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# while (flag): print 'Given flag is really true!'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# for循环 可以遍历字符串和列表")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# for letter in 'Python':")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     print '当前字母 :', letter")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# #")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# fruits = ['banana', 'apple',  'mango']")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# for index in range(len(fruits)):")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     print '当前水果 :', fruits[index]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# for index in range(len(fruits)):")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     print '当前水果 :', fruits[index]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# beak 跳出当前层的循环")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" letter "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Python'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" letter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'h'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# continue 结束本次循环，开始下一次循环 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" letter "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Python'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" letter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'h'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# beak 跳出当前层的循环")]),t._v("\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);