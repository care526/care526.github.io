(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{570:function(e,n,a){"use strict";a.r(n);var s=a(32),p=Object(s.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"sp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sp"}},[e._v("#")]),e._v(" sp")]),e._v(" "),a("p",[e._v("node 和 webpack 的版本越新，打包的速度越快，会利用node中的新特性，提高打包速度")]),e._v(" "),a("p",[e._v("npx")]),e._v(" "),a("p",[e._v("npm init -y 直接应用默认配置\nnpm info webpack 查看库的信息")]),e._v(" "),a("p",[e._v("一切皆模块")]),e._v(" "),a("p",[e._v("npx webpack --config xxx.js  // 指定加载的配置文件")]),e._v(" "),a("p",[e._v("npm run // 运行包的时候会先在依赖库里面找，找不到再去全局库里面找")]),e._v(" "),a("p",[e._v("webpack index.js  加载默认的配置")]),e._v(" "),a("p",[e._v("占位符 在loader部分里面")]),e._v(" "),a("p",[e._v("loader的处理顺序 从下到上，从右向左\nfile-loader 将静态资源移动到指定的位置，并返回路径\nurl-loader 将指定大小的文件资源，打包为base64，更大的同file-loader\nvue-loader 处理vue文件\nstyle-loader 将样式代码添加到head标签\ncss-loader 分析css之间的引用，合并为一段css\nsass-loader 编译scss样式文件\npostcss-loader 添加厂商前缀\nnode-sass")]),e._v(" "),a("p",[e._v("html-webpack-plugin\nclean-webpack-plugin")]),e._v(" "),a("p",[e._v("devtool socuse-map\n指定代码的映射，用于找错误\n建议使用 dev: cheap-module-eval-source-map\npro:cheap-module-source-map")]),e._v(" "),a("p",[e._v("devServe: 本地开发环境配置\nwebpack --watch 监听文件的变化，自动打包\nhot: true\nhotOnly: true\nnew webpack.HotModuleReplacementPlugin()\nif (module.hot) {}  如vue-loader 已经设置好了hot的相关代码")]),e._v(" "),a("p",[e._v("webpack --env  在配置文件中可以拿到 env这个变量 默认为true\n--env=abc\n--env.pro")]),e._v(" "),a("p",[e._v("webpack-merge npm包")]),e._v(" "),a("p",[e._v("ES 和 commjs 引入文件的区别\nwebpack的按需加载只支持 es")]),e._v(" "),a("p",[e._v('pro模式下  该选项可以不写 也会生效\noptimization: {\nusedExports: true\n}\npackage.json 里面添加属性 sideEffects: ["@babel/polly-fill"]  忽略按需打包的文件\nsideEffects: false 没有的话 设置false')]),e._v(" "),a("p",[e._v("分为上个配置文件，com pro dev")]),e._v(" "),a("h2",{attrs:{id:"代码分割"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码分割"}},[e._v("#")]),e._v(" 代码分割")]),e._v(" "),a("p",[e._v("将第三方库提取出来 变为单独的文件加载   并行加载文件,而且用户不需要再加载已经缓存的第三方库的文件\n同步代码 只要配置下面的配置 就可以了\noptimization: {\nsplitChunks: 'all'\n}\n异步代码会自动打包到不同的文件")]),e._v(" "),a("p",[e._v("splitChunksPlugin\n/* webpackChunkName: \"xxx\" */\noptimization: {\nsplitChunks: 'all | async',  // 所有和单独对异步代码\ncacheGroups: {\nvendors: false,\ndefault: false\n}\n}\n如果文件过大，也是可以分割的，不一定是公共代码")]),e._v(" "),a("p",[e._v("babel的官方动态引入插件 @babel/plugin-syntax-dynamic-import")])])}),[],!1,null,null,null);n.default=p.exports}}]);