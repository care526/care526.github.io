(window.webpackJsonp=window.webpackJsonp||[]).push([[190],{657:function(e,s,r){"use strict";r.r(s);var a=r(32),n=Object(a.a)({},(function(){var e=this,s=e.$createElement,r=e._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"redis"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[e._v("#")]),e._v(" redis")]),e._v(" "),r("h2",{attrs:{id:"redis的使用场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis的使用场景"}},[e._v("#")]),e._v(" redis的使用场景")]),e._v(" "),r("ul",[r("li",[e._v("cookie")]),e._v(" "),r("li",[e._v("session")]),e._v(" "),r("li",[e._v("权鉴")]),e._v(" "),r("li",[e._v("一次性的信息")]),e._v(" "),r("li",[e._v("访问量大的数据，甚至整个页面")])]),e._v(" "),r("h2",{attrs:{id:"文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#文件"}},[e._v("#")]),e._v(" 文件")]),e._v(" "),r("ul",[r("li",[e._v("./redis-server\n启动redis服务")]),e._v(" "),r("li",[e._v("./redis-cli\n进入redis客户端")])]),e._v(" "),r("h2",{attrs:{id:"命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#命令"}},[e._v("#")]),e._v(" 命令")]),e._v(" "),r("ul",[r("li",[e._v("关闭redis服务\nshutdown")]),e._v(" "),r("li",[e._v("公共命令"),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("del mystr  # 删除key\nkeys *  # 获取所有的key\nselete n  # 选择第n个库\nmove key n  # 将某个key移动到第n个库，如果有的话，就不能移动\nflush db  # 清除指定库 ？？？？？\ntype key  # 输出key的类型\nrandmkey  # 随机key ？？？？？\nexists key  # 判断key是否存在\nexpire key n  # 设置key n秒过期\npexpire key n  # 设置key n毫秒过期\npersist key  # 删除key的过期时间\n")])])])])]),e._v(" "),r("h2",{attrs:{id:"五种数据结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#五种数据结构"}},[e._v("#")]),e._v(" 五种数据结构")]),e._v(" "),r("ul",[r("li",[e._v("strings 字符串"),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('set mystr “hello world!”  # 设置字符串\nset mystr  # 获取指定key对应的字符串\nmset\nmget\nappend mystr "val"  # 将mystr的后面追加val这个字符串\ngetrange mystr 0 1  # 获取mystr字符串的第0位到第1位的所有字符子串(包括end位)\nsetrange mystr 2 zzz  # 将mystr的从2位开始到后面的子串替换为zzz(如果不够长，中间的数据会被\\x00替代)\ngetbit\nsetbit\nbitcount\nbitop\n')])])])]),e._v(" "),r("li",[e._v("lists 字符串列表"),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("lpush mystrs  # 从左边推入元素\nrpush mystrs  # 从右边推入元素\nlpop mystrs  # 从左边弹出元素\nrpop mystrs  # 从右边弹出元素\nlindex mystrs n  # 获取指定位置的元素(索引从0开始)\nlrange mystrs n m  # 获取从n到m范围的元素列表(索引从0开始)\nltrim mystrs n m  # 只保留从n开始到m位置的列表(包括n,m)\nblpop\nbrpop\nrpoplpush\nbrpoplpush\n")])])])]),e._v(" "),r("li",[e._v("sets 字符串集合"),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("sadd care 1  # 添加元素到care这个字符串中\nsrem care 1  # 从集合中删除元素\nsmembers care  # 显示所有元素\nsismember care 1  # 查看指定值是否存在集合中(有返回1，没有返回0)\nscard\nsrandmember\nspop\nsmove\nsdiff\nsdiffstore\nsinter\nsinterstore\nsunion\nsunionstore\n")])])])]),e._v(" "),r("li",[e._v("sorted sets 有序字符串集合"),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("zadd care 10 care10  # 添加care10元素，分值为10\nzadd care 20 care20  # 添加care20元素，分值为20\nzrange care 0 -1 withscores  # 获取所有元素\nzrangebyscore care 9 11 withscores  # 获取分值在9到11之间到元素s\nzrem care care20  # 删除care20这个元素\nzcard\nzincrby\nzcount\nzrank\nzscore\nzrange\nzrevrank\nzrevrange\nzrangebyscore\nzrevrangebyscore\nzremrangebyrank\nzremrangebyscore\nzinterstore\nzunionstore\n")])])])]),e._v(" "),r("li",[e._v("hashes 哈希"),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("hset care care1 1  # 设置哈希care的care1键对应的值为1\nhset care care2 2  # 设置哈希care的care2键对应的值为2\nhdel care care1  # 删除哈希care的键care1\nhgetall care  # 打印哈希care的所有键值对\nhmget\nhmset\nhdel\nhlen\nhexists\nhkeys\nhvals\nhgetall\nhincrby\nhincrbyfloat\n")])])])])]),e._v(" "),r("h2",{attrs:{id:"配置文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[e._v("#")]),e._v(" 配置文件")]),e._v(" "),r("h2",{attrs:{id:"几种集群方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#几种集群方式"}},[e._v("#")]),e._v(" 几种集群方式")]),e._v(" "),r("ul",[r("li",[e._v("主从模式\n主只写操作，从负责读操作，同时同步主的数据")]),e._v(" "),r("li",[e._v("哨兵模式\n同主从模式，但是从会在主挂掉的时候，立即接替主的工作，保证健壮性")]),e._v(" "),r("li",[e._v("集群模式\n各自保存相应的数据，内部使用二进制协议优化传输速度。访问节点上没有的据时，实际上访问的是其他节点的数据。")])]),e._v(" "),r("h2",{attrs:{id:"其他"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[e._v("#")]),e._v(" 其他")]),e._v(" "),r("p",[e._v("key值太长，降低查找效率\nkey值太短，可读性低")]),e._v(" "),r("p",[e._v("数据结构 增删改查\n主从模式\n持久化 两种模式")])])}),[],!1,null,null,null);s.default=n.exports}}]);