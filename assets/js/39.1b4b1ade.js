(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{502:function(a,e,t){"use strict";t.r(e);var s=t(32),r=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"shell"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shell"}},[a._v("#")]),a._v(" Shell")]),a._v(" "),t("p",[a._v("Shell脚本的目的，使Linux的使用自动化，减少管理者不必要的时间浪费。")]),a._v(" "),t("h2",{attrs:{id:"shell知识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shell知识"}},[a._v("#")]),a._v(" Shell知识")]),a._v(" "),t("ul",[t("li",[a._v("分类"),t("br"),a._v("\n交互Shell：等待用户输入命令的Shell"),t("br"),a._v("\n非交互Shell：读取某个脚本文件，直接执行")])]),a._v(" "),t("h2",{attrs:{id:"格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#格式"}},[a._v("#")]),a._v(" 格式")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#! /bin/bash  #表示用什么来执行该脚本\necho 123 #我是注释\n")])])]),t("ul",[t("li",[a._v("同一行的多个命令中间用；分隔")])]),a._v(" "),t("h2",{attrs:{id:"执行脚本的两种方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行脚本的两种方式"}},[a._v("#")]),a._v(" 执行脚本的两种方式")]),a._v(" "),t("ul",[t("li",[a._v("在脚本第一行指名执行的解释器，并赋予脚本可执行权限")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#!/bin/bash\nxxx\nxxx\nps: 上面三行是a.sh的内容\n\nchmod 755 a.sh\n")])])]),t("p",[a._v("JS脚本(使用node解释器)\n"),t("code",[a._v("#!/home/care/config/node/bin/node")])]),a._v(" "),t("h2",{attrs:{id:"常用的命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用的命令"}},[a._v("#")]),a._v(" 常用的命令")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("set 查看环境变量列表")])]),a._v(" "),t("li",[t("p",[a._v("echo XXX  输出内容"),t("br"),a._v("\n-n 不换行输出"),t("br"),a._v("\necho 内容 -> filename 输出内容到文件"),t("br"),a._v('\necho 输出的语句中有‘“的时候，在最外层是‘时，内部不要有单独的’ |　"一样')])]),a._v(" "),t("li",[t("p",[a._v("pwd  打印当前所在位置")])]),a._v(" "),t("li",[t("p",[a._v("test 测试命令"),t("br"),a._v("\n一般用于if语句的后面")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("if test XXX\nif [ xxx ]   #[]也是测试命令\n")])])]),t("p",[a._v("tese测试的三种条件为　数值比较　字符串比较　文件比较"),t("br"),a._v("\nn1 -eq(==) n2"),t("br"),a._v("\n-ge(>=) -gt(>) -le(<=) -lt(<) -ne(!=)")])]),a._v(" "),t("li",[t("p",[a._v("read 选项 变量名"),t("br"),a._v('\n-p "提示信息"'),t("br"),a._v("\n-t 等待秒数"),t("br"),a._v("\n-n 接受的字符数"),t("br"),a._v("\n-s 隐藏输入信息"),t("br"),a._v('\nread -p "请输入姓名：" -t 30 name  #等待30秒将输入赋值给name变量')])])]),a._v(" "),t("h2",{attrs:{id:"变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[a._v("#")]),a._v(" 变量")]),a._v(" "),t("p",[a._v("care=10   #定义变量care，=两边不能有空格"),t("br"),a._v("\necho $care   #使用变量care，用$"),t("br"),a._v("\necho ${care}  # 也可以")]),a._v(" "),t("ul",[t("li",[a._v("` 反引号，用于得到命令的输出值　care=`ls`")]),a._v(" "),t("li",[a._v("> 输出重定向，如：date > tes，date的输出信息保存在tes文件中，如果文件存在，将会被覆盖")]),a._v(" "),t("li",[a._v(">> 同上，不覆盖，追加输出到文件的后面")]),a._v(" "),t("li",[a._v("< 输入重定向　wc < tes 将tes的文本输入wc命令中。这个用的其实有点少，一般用管道")]),a._v(" "),t("li",[a._v("｜管道　oder1 | oder2 将order1命令的输出送给oder2")])]),a._v(" "),t("p",[a._v("局部变量定义(在函数中使用)\n"),t("code",[a._v("local care")])]),a._v(" "),t("h2",{attrs:{id:"重要的环境变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重要的环境变量"}},[a._v("#")]),a._v(" 重要的环境变量")]),a._v(" "),t("p",[a._v("HOME  用户的主目录（即家目录）\nSHELL  用户在使用的Shell解释器名称\nPATH  定义解释器搜索用户执行命令的路径\nRANDOM  生成一个随机数字\nLANG  系统语言、语系名称\nPS1  \tBash解释器的提示符\nHISTSIZE  history命令可显示的命令条数\nHISTFILESIZE  可以保存记录的命令的条数")]),a._v(" "),t("h2",{attrs:{id:"流程语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#流程语句"}},[a._v("#")]),a._v(" 流程语句")]),a._v(" "),t("p",[t("strong",[a._v("if语句")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("if ls   #当执行完if后面的命令后，退出状态码是0，表示执行成功，就会继续执行then后面的语句\nthen    #所以if检测的是命令是否执行成功\n    echo it works\nfi\n\nif ls; then   #也可以这样写\n    echo it works\nfi\n")])])]),t("p",[t("strong",[a._v("if else语句")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("if XXX\nthen\n    XXX\nelse\n    XXX\nfi\n")])])]),t("p",[t("strong",[a._v("if else if语句")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("if XXX\nthen\n    XXX\nelse if XXX\nthen\n    XXX\nfi\n")])])]),t("p",[t("strong",[a._v("while语句")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("while test commed\ndo\n  #命令\ndone\n")])])]),t("p",[t("strong",[a._v("for语句")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("for test in $array  #这个位置可以是个数组,也可以是多个变量都写在这儿\ndo\n  #命令\ndone\n\nfor (( i=1; i<=10; i++))  # C语言风格的for循环\ndo\n  echo $i\ndone\n\nfor (( i=1, a=1; i<=10; i++, a--))   # 多变量的循环\n")])])]),t("h2",{attrs:{id:"函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[a._v("#")]),a._v(" 函数")]),a._v(" "),t("h3",{attrs:{id:"函数定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数定义"}},[a._v("#")]),a._v(" 函数定义")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function name {}\nname () {}\n")])])]),t("h3",{attrs:{id:"函数参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数参数"}},[a._v("#")]),a._v(" 函数参数")]),a._v(" "),t("p",[a._v("调用传参\n"),t("code",[a._v("name option1 option2 ...")]),a._v("\n参数使用\n在函数内部$开头的一些变量")]),a._v(" "),t("ul",[t("li",[a._v("$0: 函数名")]),a._v(" "),t("li",[a._v("$n: 第n个参数")]),a._v(" "),t("li",[a._v("$#: 参数的个数")]),a._v(" "),t("li",[a._v("$?: 前面一行的状态吗(0 ~ 255)")]),a._v(" "),t("li",[a._v("$*: 所有参数(将所有参数当做一个整体,中间用空格分隔)")]),a._v(" "),t("li",[a._v("$@: 所有参数(用for循环可以遍历所有参数)")])]),a._v(" "),t("h3",{attrs:{id:"函数使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数使用"}},[a._v("#")]),a._v(" 函数使用")]),a._v(" "),t("p",[t("code",[a._v("name #直接写函数的名字")]),a._v("\n先定义后使用\nreturn number(0~255之间)\n用$?来获取,必须在函数调用的后一行使用")]),a._v(" "),t("h3",{attrs:{id:"接收函数的输出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接收函数的输出"}},[a._v("#")]),a._v(" 接收函数的输出")]),a._v(" "),t("ul",[t("li",[a._v("默认的输出\n函数最后一个语句的执行退出码")]),a._v(" "),t("li",[a._v("使用return来返回一个０～255的数字\nps: 以上两个方法，都要在函数执行完后立即接收，$?．否则会丢失")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("name  #该函数用return返回了一个数字\necho $?  #打印出该函数的返回值\n")])])]),t("ul",[t("li",[a._v("将整个函数的输出保存在一个变量当中(会忽略read的提示)"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("care=`name`  #会将name函数的所有输出保存在care变量当中\n")])])])])]),a._v(" "),t("h2",{attrs:{id:"读取用户输入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#读取用户输入"}},[a._v("#")]),a._v(" 读取用户输入")]),a._v(" "),t("p",[a._v("read 选项 参数 待保存的变量")]),a._v(" "),t("ul",[t("li",[a._v("-p '相关提示'  #提示用户输入什么")]),a._v(" "),t("li",[a._v("-t 5  #在5s内输入,超时后read返回一个非0的状态码")]),a._v(" "),t("li",[a._v("-s #隐藏输入,如输入密码的时候\nread还可以读取文件的数据")])]),a._v(" "),t("h2",{attrs:{id:"跨脚本调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#跨脚本调用"}},[a._v("#")]),a._v(" 跨脚本调用")]),a._v(" "),t("p",[a._v("在ａ脚本在使用ｂ脚本中的func1这个函数")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#!/bin/bash\n. ./b  # 使用./source 表示在ａ脚本的上下文中运行ｂcat\nfunc1\n")])])]),t("h2",{attrs:{id:"其他"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[a._v("#")]),a._v(" 其他")]),a._v(" "),t("p",[a._v("ll && ls  # 如果ll执行不成功，ls不会执行\nll || ls  # 如果ll执行不成功，ls也会执行\nll ; ls  # 同上")])])}),[],!1,null,null,null);e.default=r.exports}}]);