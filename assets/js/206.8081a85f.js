(window.webpackJsonp=window.webpackJsonp||[]).push([[206],{674:function(t,a,r){"use strict";r.r(a);var s=r(32),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"面向对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[t._v("#")]),t._v(" 面向对象")]),t._v(" "),r("ul",[r("li",[t._v("OOP\nObject Oriented Programming"),r("br"),t._v("\n面向对象的编程")]),t._v(" "),r("li",[t._v("OOD\nObject-Oriented Design"),r("br"),t._v("\n面向对象的设计")]),t._v(" "),r("li",[t._v("OOA\nObject-Oriented Analysis"),r("br"),t._v("\n面向对象的分析")])]),t._v(" "),r("hr"),t._v(" "),r("h2",{attrs:{id:"五大原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#五大原则"}},[t._v("#")]),t._v(" 五大原则")]),t._v(" "),r("h3",{attrs:{id:"单一职责原则srp-single-responsibility-principle"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#单一职责原则srp-single-responsibility-principle"}},[t._v("#")]),t._v(" 单一职责原则SRP(Single Responsibility Principle)")]),t._v(" "),r("p",[t._v("类的功能要单一")]),t._v(" "),r("h3",{attrs:{id:"开放封闭原则ocp-open-close-principle"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#开放封闭原则ocp-open-close-principle"}},[t._v("#")]),t._v(" 开放封闭原则OCP(Open－Close Principle)")]),t._v(" "),r("p",[t._v("一个模块对于拓展是开放的，对于修改是封闭的")]),t._v(" "),r("h3",{attrs:{id:"里式替换原则lsp-the-liskov-substitution-principle-lsp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#里式替换原则lsp-the-liskov-substitution-principle-lsp"}},[t._v("#")]),t._v(" 里式替换原则LSP(the Liskov Substitution Principle LSP)")]),t._v(" "),r("p",[t._v("子类可以替换父类出现在父类能够出现的任何地方")]),t._v(" "),r("h3",{attrs:{id:"依赖倒置原则dip-the-dependency-inversion-principle-dip"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#依赖倒置原则dip-the-dependency-inversion-principle-dip"}},[t._v("#")]),t._v(" 依赖倒置原则DIP(the Dependency Inversion Principle DIP)")]),t._v(" "),r("h3",{attrs:{id:"接口分离原则isp-the-interface-segregation-principle-isp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#接口分离原则isp-the-interface-segregation-principle-isp"}},[t._v("#")]),t._v(" 接口分离原则ISP(the Interface Segregation Principle ISP)")]),t._v(" "),r("h3",{attrs:{id:"最少知识原则lkp-least-knowledge-principle-lkp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#最少知识原则lkp-least-knowledge-principle-lkp"}},[t._v("#")]),t._v(" 最少知识原则LKP(Least Knowledge Principle LKP)")]),t._v(" "),r("p",[t._v("尽可能地减少类之间依赖，降低类之间的耦合")]),t._v(" "),r("hr"),t._v(" "),r("h2",{attrs:{id:"三大特性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三大特性"}},[t._v("#")]),t._v(" 三大特性")]),t._v(" "),r("h3",{attrs:{id:"封装"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[t._v("#")]),t._v(" 封装")]),t._v(" "),r("h3",{attrs:{id:"继承"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),r("h3",{attrs:{id:"多态"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[t._v("#")]),t._v(" 多态")]),t._v(" "),r("h2",{attrs:{id:"java"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java"}},[t._v("#")]),t._v(" Java")]),t._v(" "),r("h2",{attrs:{id:"类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[t._v("#")]),t._v(" 类")]),t._v(" "),r("p",[t._v("类是对象的抽象")]),t._v(" "),r("h2",{attrs:{id:"对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[t._v("#")]),t._v(" 对象")]),t._v(" "),r("p",[t._v("对象是通过类产生的")]),t._v(" "),r("h2",{attrs:{id:"封装-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#封装-2"}},[t._v("#")]),t._v(" 封装")]),t._v(" "),r("h2",{attrs:{id:"继承-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#继承-2"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),r("h2",{attrs:{id:"多态-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#多态-2"}},[t._v("#")]),t._v(" 多态")]),t._v(" "),r("h2",{attrs:{id:"消息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#消息"}},[t._v("#")]),t._v(" 消息")]),t._v(" "),r("h2",{attrs:{id:"接口"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[t._v("#")]),t._v(" 接口")]),t._v(" "),r("h2",{attrs:{id:"javascript"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#javascript"}},[t._v("#")]),t._v(" Javascript")]),t._v(" "),r("h2",{attrs:{id:"对象-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#对象-2"}},[t._v("#")]),t._v(" 对象")]),t._v(" "),r("ol",[r("li",[t._v("对象是通过构造函数产生的")]),t._v(" "),r("li",[t._v("对象通过字面量的方式直接生成的")])]),t._v(" "),r("h2",{attrs:{id:"面向对象的分析和设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#面向对象的分析和设计"}},[t._v("#")]),t._v(" 面向对象的分析和设计")]),t._v(" "),r("p",[t._v("是一种思维方式")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("类"),r("br"),t._v("\n共享相同属性、操作、方法和关系或行为的一组对象的描述符")])]),t._v(" "),r("li",[r("p",[t._v("对象"),r("br"),t._v("\n一个类创建的一个实例")])]),t._v(" "),r("li",[r("p",[t._v("UML"),r("br"),t._v("\n统一建模语言")])]),t._v(" "),r("li",[r("p",[t._v("设计模式")])])]),t._v(" "),r("p",[t._v("软件系统是由多个对象组成，对象间通过消息互相交流、共同协作、以完成整个系统的工作")]),t._v(" "),r("p",[t._v("书籍\nUML和模式应用"),r("br"),t._v("\n面向对象葵花宝典 - 李华云\n深入浅出面向对象的分析与设计")]),t._v(" "),r("p",[t._v("关于思维的书\n你的灯亮着吗 - 唐纳德高斯\n程序员思维修炼 - Andy Hunt\n黑裤与画家 Paul Graham")])])}),[],!1,null,null,null);a.default=e.exports}}]);