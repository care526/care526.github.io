(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{516:function(e,t,s){"use strict";s.r(t);var a=s(32),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"koa"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#koa"}},[e._v("#")]),e._v(" Koa")]),e._v(" "),s("h2",{attrs:{id:"基本用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[e._v("#")]),e._v(" 基本用法")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const Koa = require('koa');\n// 路由模块 \nconst route = require('koa-route');\n// 静态资源托管\nconst serve = require('koa-static');\n// 提取post请求的body为键值对\nconst koaBody = require('koa-body');\n\napp.use(serve('要托管的文件的path'));\n\napp.use(\n  route\n    .get('/', async (ctx, next) => { // 处理函数体 })\n    .get('/a', async (ctx, next) => { // 处理函数体 })\n    .post('/b', async (ctx, next) => { // 处理函数体 })\n);\n\nconst app = new Koa();\n\napp.listen(3000);\n")])])]),s("p",[e._v("通过加工req/res对象出处理响应")]),e._v(" "),s("p",[e._v("Context 上下文对象，包含了req和res\nres.type  类型\nres.body  返回的数据\nreq.path  请求的路由")]),e._v(" "),s("p",[e._v("ctx.cookie.get('name')\nctx.cookie.set('name', value)")]),e._v(" "),s("p",[e._v("ctx.request.body.name  // 某个body键")]),e._v(" "),s("h2",{attrs:{id:"application"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#application"}},[e._v("#")]),e._v(" Application")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("属性(我也不知道时干嘛的)")]),e._v(" "),s("ul",[s("li",[e._v("app.env")]),e._v(" "),s("li",[e._v("app.proxy")]),e._v(" "),s("li",[e._v("app.subdomainOffset  主域的长度")]),e._v(" "),s("li",[e._v("app.context\nctx的原型，可以通过编辑app.context来为ctx添加属性")])])]),e._v(" "),s("li",[s("p",[e._v("app.callback()\n使用此回调函数将koa应用挂载到Connect / Express应用程序上")])]),e._v(" "),s("li",[s("p",[e._v("app.use(function)  添加中间件")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("app.use(async ctx => {\n  ctx.body = 'Hello World';\n});\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("app.use(async (ctx, next) => {\n  // 部分代码\n  await next();\n  // 部分代码\n});\n")])])])]),e._v(" "),s("li",[s("p",[e._v("app.listen(port)")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("app.listen(3000);\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const http = require('http');\nconst https = require('https');\nconst Koa = require('koa');\nconst app = new Koa();\nhttp.createServer(app.callback()).listen(3000);\nhttps.createServer(app.callback()).listen(3001);\n")])])])])]),e._v(" "),s("h2",{attrs:{id:"context"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#context"}},[e._v("#")]),e._v(" Context")]),e._v(" "),s("ul",[s("li",[e._v("ctx  app.context / Context")]),e._v(" "),s("li",[e._v("ctx.request  这是Koa的Request\nRequest 别名")]),e._v(" "),s("li",[e._v("ctx.response  这时Koa的Response\nResponse 别名")]),e._v(" "),s("li",[e._v("ctx.req  Node的request")]),e._v(" "),s("li",[e._v("ctx.res  Ndoe的response")])]),e._v(" "),s("blockquote",[s("p",[e._v("建议不要直接处理Node的response，使用Koa的Response")])]),e._v(" "),s("ul",[s("li",[e._v("ctx.state")]),e._v(" "),s("li",[e._v("ctx.app  应用程序实例引用")]),e._v(" "),s("li",[e._v("ctx.app.emit(event)  触发event事件")]),e._v(" "),s("li",[e._v("ctx.cookies.get(name, [options])  获取cookie\n"),s("code",[e._v("ctx.cookies.get('LastVisit', { signed: true })")])]),e._v(" "),s("li",[e._v("ctx.cookies.set(name, value, [options])  设置cookie\n"),s("code",[e._v("ctx.cookies.set('LastVisit', new Date().toISOString(), { signed: true })")])]),e._v(" "),s("li",[e._v("ctx.throw([status], [msg], [properties])  抛出错误"),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("ctx.throw(400);\nctx.throw(400, 'name required');\nctx.throw(400, 'name required', { user: user });\n")])])])]),e._v(" "),s("li",[e._v("ctx.assert(value, [status], [msg], [properties])")])]),e._v(" "),s("h2",{attrs:{id:"request-可读流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#request-可读流"}},[e._v("#")]),e._v(" Request(可读流)")]),e._v(" "),s("ul",[s("li",[e._v("request.header(request.headers)  请求标头对象")]),e._v(" "),s("li",[e._v("request.method  请求方法")]),e._v(" "),s("li",[e._v("request.length  返回以数字返回请求的 Content-Length")]),e._v(" "),s("li",[e._v("request.url  获取请求 URL")]),e._v(" "),s("li",[e._v("request.originalUrl  获取请求原始URL")]),e._v(" "),s("li",[e._v("request.origin  获取URL的来源，包括 protocol 和 host")]),e._v(" "),s("li",[e._v("request.href  获取完整的请求URL，包括 protocol，host 和 url")]),e._v(" "),s("li",[e._v("request.path  获取请求路径名")]),e._v(" "),s("li",[e._v("request.querystring  根据 ? 获取原始查询字符串")]),e._v(" "),s("li",[e._v("request.search  使用 ? 获取原始查询字符串")]),e._v(" "),s("li",[e._v("request.host  获取当前主机(hostname:port)")]),e._v(" "),s("li",[e._v("request.hostname  存在时获取主机名")]),e._v(" "),s("li",[e._v("request.URL  获取 WHATWG 解析的 URL 对象")]),e._v(" "),s("li",[e._v('request.type  获取请求 Content-Type,不含参数 "charset"')]),e._v(" "),s("li",[e._v("request.charset  在存在时获取请求字符集")]),e._v(" "),s("li",[e._v("request.query  获取解析的查询字符串")]),e._v(" "),s("li",[e._v("request.fresh  检查请求缓存是否“新鲜”")]),e._v(" "),s("li",[e._v("request.stale  检查请求缓存是否“不新鲜”")]),e._v(" "),s("li",[e._v("request.protocol  返回请求协议")]),e._v(" "),s("li",[e._v("request.secure")]),e._v(" "),s("li",[e._v("request.ip  请求远程地址")]),e._v(" "),s("li",[e._v("request.ips")]),e._v(" "),s("li",[e._v('request.subdomains  将子域返回为数组\n如果域名为“tobi.ferrets.example.com”\n如果 app.subdomainOffset 未设置, ctx.subdomains 是 ["ferrets", "tobi"]\n如果 app.subdomainOffset 是 3, ctx.subdomains 是 ["tobi"]')]),e._v(" "),s("li",[e._v("request.is(types...)")]),e._v(" "),s("li",[e._v("request.accepts(types)")]),e._v(" "),s("li",[e._v("request.acceptsEncodings(encodings)")]),e._v(" "),s("li",[e._v("request.acceptsCharsets(charsets)")]),e._v(" "),s("li",[e._v("request.acceptsLanguages(langs)")]),e._v(" "),s("li",[e._v("request.idempotent")]),e._v(" "),s("li",[e._v("request.socket")]),e._v(" "),s("li",[e._v("request.get(field)")])]),e._v(" "),s("h2",{attrs:{id:"response-读写流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#response-读写流"}},[e._v("#")]),e._v(" Response(读写流)")]),e._v(" "),s("ul",[s("li",[e._v("response.header(response.headers)  响应标头对象")]),e._v(" "),s("li",[e._v("response.socket  请求套接字")]),e._v(" "),s("li",[e._v("response.status  获取响应状态,默认设置为404")]),e._v(" "),s("li",[e._v("response.message  获取响应的状态消息\n默认情况下, response.message 与 response.status 关联")]),e._v(" "),s("li",[e._v("response.length  以数字返回响应的 Content-Length")]),e._v(" "),s("li",[e._v("response.body  获取响应主体")]),e._v(" "),s("li",[e._v("response.get(field)  不区分大小写获取响应标头字段值 field\n"),s("code",[e._v("const etag = ctx.response.get('ETag');")])]),e._v(" "),s("li",[e._v("response.set(field, value)  设置响应标头 field 到 value\n"),s("code",[e._v("ctx.set('Cache-Control', 'no-cache');")])]),e._v(" "),s("li",[e._v("response.append(field, value)  用值 val 附加额外的标头 field\n"),s("code",[e._v("ctx.append('Link', '<http://127.0.0.1/>');")])]),e._v(" "),s("li",[e._v("response.set(fields)  用一个对象设置多个响应标头fields"),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("ctx.set({\n  'Etag': '1234',\n  'Last-Modified': date\n});\n")])])])]),e._v(" "),s("li",[e._v("response.remove(field)  删除标头 field")]),e._v(" "),s("li",[e._v('response.type  获取响应 Content-Type 不含参数 "charset"\n'),s("code",[e._v('const ct = ctx.type; // // => "image/png"')])]),e._v(" "),s("li",[e._v("response.is(types...)")]),e._v(" "),s("li",[e._v("response.redirect(url, [alt])")]),e._v(" "),s("li",[e._v("response.attachment([filename], [options])")]),e._v(" "),s("li",[e._v("response.headerSent")]),e._v(" "),s("li",[e._v("response.lastModified")]),e._v(" "),s("li",[e._v("response.etag=")]),e._v(" "),s("li",[e._v("response.vary(field)")]),e._v(" "),s("li",[e._v("response.flushHeaders()")]),e._v(" "),s("li")]),e._v(" "),s("h2",{attrs:{id:"事件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件"}},[e._v("#")]),e._v(" 事件")]),e._v(" "),s("ul",[s("li",[e._v("错误处理事件\n自定义错误处理事件，默认所有错误输出到stderr"),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("app.on('error', (err, ctx) => {\n  // 部分代码\n})\n")])])])])]),e._v(" "),s("h2",{attrs:{id:"异常处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异常处理"}},[e._v("#")]),e._v(" 异常处理")]),e._v(" "),s("ul",[s("li",[e._v("定义全局错误处理函数")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("app.on('error', () => {\n  // xxx\n})\n")])])]),s("ul",[s("li",[e._v("try / catch\n里面不要写异步，捕获不到异步里面的错误")]),e._v(" "),s("li",[e._v("ctx.throw(code)")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("ctx.throw(400)  // ctx.body会自动填充内容\nctx.throw(500)  // ctx.body会自动填充内容\n")])])]),s("ul",[s("li",[e._v("自己设置错误code")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  ctx.response.status = 404\n  ctx.response.body = 'Page Not Found'  // 可以自己设置ctx.body\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);