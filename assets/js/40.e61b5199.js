(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{503:function(t,a,r){"use strict";r.r(a);var s=r(32),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"string"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String")]),t._v(" "),r("h3",{attrs:{id:"charat-number-返回一个长度为1的字符串-不改变原字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#charat-number-返回一个长度为1的字符串-不改变原字符串"}},[t._v("#")]),t._v(" charAt(number) <返回一个长度为1的字符串，不改变原字符串>")]),t._v(" "),r("p",[t._v("取出一个字符串中指定位置的字符"),r("br"),t._v("\n如果参数不在 0-length-1 范围内，返回空字符串 “”"),r("br"),t._v("\n“asd”.charAt(1) // 返回 “s”")]),t._v(" "),r("h3",{attrs:{id:"concat-value-返回连接后的字符串-不改变原字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#concat-value-返回连接后的字符串-不改变原字符串"}},[t._v("#")]),t._v(" concat(value,.....) <返回连接后的字符串，不改变原字符串>")]),t._v(" "),r("p",[t._v("var a = “a”；"),r("br"),t._v('\nb = a.concat("b","c","d") //b：“abcd” a：“a”'),r("br"),t._v("\n使用“+”操作符来连接字符串更简单"),r("br"),t._v("\n以上程序可改为 b = a + “b” + “c” + “d”")]),t._v(" "),r("h3",{attrs:{id:"indexof-string-start-返回一个数字-不改变原字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#indexof-string-start-返回一个数字-不改变原字符串"}},[t._v("#")]),t._v(" indexOf(string,start) <返回一个数字，不改变原字符串>")]),t._v(" "),r("p",[t._v("搜索一个字符串，返回匹配子字符串第一个字符的位置，匹配不成功返回 -1"),r("br"),t._v("\n第二个参数可选，指定从字符串那个位置开始搜索"),r("br"),t._v('\n“asdf”.indexOf("sd") // 返回 1'),r("br"),t._v('\n“asdf”.indexOf("sd",2) //返回 -1'),r("br"),t._v('\n“asdfgh”.indexOf("gh",2) /返回 4')]),t._v(" "),r("h3",{attrs:{id:"includes-string-start-返回一个布尔值-不改变原字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#includes-string-start-返回一个布尔值-不改变原字符串"}},[t._v("#")]),t._v(" includes(string,start) <返回一个布尔值，不改变原字符串>")]),t._v(" "),r("p",[t._v("搜索一个字符串，确定字符串是否被包含在字符串里，是返回true，否则返回false"),r("br"),t._v("\n第二个参数可选，表示开始搜索的位置"),r("br"),t._v('\n"Hello world".includes("Hello") //true'),r("br"),t._v('\n"Hello world".includes("Hello",4) //false')]),t._v(" "),r("h3",{attrs:{id:"startswith-string-start-返回一个布尔值-不改变原字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#startswith-string-start-返回一个布尔值-不改变原字符串"}},[t._v("#")]),t._v(" startsWith(string,start) <返回一个布尔值，不改变原字符串>")]),t._v(" "),r("p",[t._v("搜索一个字符串，确定字符串是否被包含在字符串的头部，是返回true，否则返回false"),r("br"),t._v("\n第二个参数可选，表示开始搜索的位置（包含该位）"),r("br"),t._v('\n"Hello world".startsWith("Hello") //true'),r("br"),t._v('\n"Hello world".startsWith("world",6) //true')]),t._v(" "),r("h3",{attrs:{id:"endswith-string-start-返回一个布尔值-不改变原字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#endswith-string-start-返回一个布尔值-不改变原字符串"}},[t._v("#")]),t._v(" endsWith(string,start) <返回一个布尔值，不改变原字符串>")]),t._v(" "),r("p",[t._v("搜索一个字符串，确定字符串是否被包含在字符串的尾部，是返回true，否则返回false"),r("br"),t._v("\n第二个参数可选，表示在前start位的字符串中的尾部是否包含（不包含该位）"),r("br"),t._v('\n"Hello world".endsWith("world") //true'),r("br"),t._v('\n"Hello world".endsWith("Hello",5) //true')]),t._v(" "),r("h3",{attrs:{id:"lastindexof-string-start-返回一个数字-不改变原字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#lastindexof-string-start-返回一个数字-不改变原字符串"}},[t._v("#")]),t._v(" lastIndexOf(string,start) <返回一个数字，不改变原字符串>")]),t._v(" "),r("p",[t._v("同上，从后向前搜索"),r("br"),t._v("\n指定start时，从指定位置向前搜索"),r("br"),t._v("\n返回匹配子字符串第一个字符的位置，匹配不成功返回 -1")]),t._v(" "),r("h3",{attrs:{id:"match-返回一个数组-不改变原字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#match-返回一个数组-不改变原字符串"}},[t._v("#")]),t._v(" match() <返回一个数组，不改变原字符串>")]),t._v(" "),r("p",[t._v("当正则表达式没有 g 时，执行一次匹配"),r("br"),t._v("\n没有找到匹配的结果，返回null"),r("br"),t._v("\n找到返回一个数组，数组的元素0为匹配文本，剩下的元素为匹配的正则表达式中圆括号子表达式"),r("br"),t._v("\n数组还有两个属性，index为匹配的文本在string中的开始位置，input为该string本身的引用"),r("br"),t._v("\n当正则表达式有 g 时，执行一次全局搜索，在string中寻找匹配的所有子串"),r("br"),t._v("\n没有找到匹配的结果，返回null"),r("br"),t._v("\n找到返回一个由匹配的子串组成的数组（没有额外的属性，也不会记录匹配的子串在string中的位置）")]),t._v(" "),r("h3",{attrs:{id:"replace-regexp-replacement-返回一个新的字符串-不改变原字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#replace-regexp-replacement-返回一个新的字符串-不改变原字符串"}},[t._v("#")]),t._v(" replace(regexp,replacement) <返回一个新的字符串，不改变原字符串>")]),t._v(" "),r("p",[t._v("regexp：一个正则表达式。若是一个直接量string，它将作一个要搜索的直接量的string"),r("br"),t._v("\nreplacement：一个要替换的文本string，或者为一个函数（返回一个string的函数）"),r("br"),t._v("\n返回一个新的字符串，原字符串中匹配regexp的地方，都替换为了replacement"),r("br"),t._v("\n若regexp是string或没有g的正则表达式，只会替换第一个匹配的子串。有g的正则匹配的子串都会替换"),r("br"),t._v("\n在reliacement中的$有特殊含义，如下："),r("br"),t._v("\n$1,$2,.....$99 匹配1~99个regexp中的圆括号子表达式中的文本"),r("br"),t._v("\n$& 匹配regexp的子串"),r("br"),t._v("\n$$ 美元符号")]),t._v(" "),r("h3",{attrs:{id:"search-regexp-返回一个数字-不改变原字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#search-regexp-返回一个数字-不改变原字符串"}},[t._v("#")]),t._v(" search(regexp) <返回一个数字，不改变原字符串>")]),t._v(" "),r("p",[t._v("regexp如果不是正则，会先传入正则RegExp()构造函数，返回一个RegExp对象"),r("br"),t._v("\n返回string中第一个匹配的regexp的子串开始的位置，没有匹配的返回-1（该方法不执行全局匹配，会忽略g标志，也会忽略regxexp的lastIndex属性，总是从string的开始位置开始搜索）")]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'321123'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token regex"}},[r("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),r("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),r("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2 ")]),t._v("\n")])])]),r("h3",{attrs:{id:"slice-start-end-返回一个字符串-不改变原字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#slice-start-end-返回一个字符串-不改变原字符串"}},[t._v("#")]),t._v(" slice(start,end) <返回一个字符串，不改变原字符串>")]),t._v(" "),r("p",[t._v("提取一个子字符串"),r("br"),t._v("\nstart：开始位置，负数表示倒数"),r("br"),t._v("\nend：结束位置（不包括），负数表示倒数，不指定表示到字符串结尾")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('“abcdefg”.slice(0,4) //"abcd"  \n“abcdefg”.slice(2,4) //"cd"  \n“abcdefg”.slice(4) //“efg”  \n“abcdefg”.slice(3，-2) //“de”  \n')])])]),r("h3",{attrs:{id:"split-delimiter-limit-返回一个数组-不改变原字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#split-delimiter-limit-返回一个数组-不改变原字符串"}},[t._v("#")]),t._v(" split(delimiter,limit) <返回一个数组，不改变原字符串>")]),t._v(" "),r("p",[t._v("将字符串切分为一个由字符串组成的数组"),r("br"),t._v("\ndelimiter：string切分处的字符串或正则表达式（分割文本不包含在子串中，"),r("br"),t._v("\n如果分割字符在string尾部，返回的数组的最后一个子串是空字符串"),r("br"),t._v("\n如果delimiter为空，返回一个只包含未切割的string的一个数组"),r("br"),t._v("\n如果delimiter为空字符串或匹配空字符的正则，string会在每个字符的前后断开，特例：第一个字符之前和最后一个字符之后的空字符不匹配，返回的数组和string的长度一样"),r("br"),t._v("\n如果正则表达式的中有圆括号，则匹配的文本也会包含在数组中）"),r("br"),t._v("\nlimit：指定返回数组的最大长度，如果不指定，将返回切分整个字符串的数组")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('"1:2:3:4:5".split(":") // [“1”，“2”，“3”，“4”，“5”]  \n"|2|3|4|".split(":") // [“”，“2”，“3”，“4”，“”]  \n“hello”.split("") // ["h","e","l","l","o"]  \n“hello”.split("",3) // ["h","e","l"]  \n"hello <b>world</b>".split(/(<[^>]*>)/) // ["hello ","<b>","world","</b>"]  \n')])])]),r("h3",{attrs:{id:"substring-from-to-返回一个字符串-不改变原字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#substring-from-to-返回一个字符串-不改变原字符串"}},[t._v("#")]),t._v(" substring(from,to) <返回一个字符串，不改变原字符串>")]),t._v(" "),r("p",[t._v("使用方法同 slice() ，但是参数不能为负数"),r("br"),t._v("\n若from > to，该方法会交换这两个参数的数值，再执行")]),t._v(" "),r("h3",{attrs:{id:"tolowercase-返回字符串的副本-不改变原字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tolowercase-返回字符串的副本-不改变原字符串"}},[t._v("#")]),t._v(" toLowerCase() <返回字符串的副本，不改变原字符串>")]),t._v(" "),r("p",[t._v("将字符串的所有大写字符转变为小写")]),t._v(" "),r("h3",{attrs:{id:"touppercase-返回字符串的副本-不改变原字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#touppercase-返回字符串的副本-不改变原字符串"}},[t._v("#")]),t._v(" toUpperCase() <返回字符串的副本，不改变原字符串>")]),t._v(" "),r("p",[t._v("将字符串的所有小写字符转变为大写")]),t._v(" "),r("h3",{attrs:{id:"trim-返回一个字符串-不改变原字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#trim-返回一个字符串-不改变原字符串"}},[t._v("#")]),t._v(" trim() <返回一个字符串，不改变原字符串>")]),t._v(" "),r("p",[t._v("去掉开头和结尾的空字符，中间的去不掉"),r("br"),t._v("\n“ asd ”.trim(); //得到“asd”")]),t._v(" "),r("h3",{attrs:{id:"repeat-n-返回一个新字符串-不改变原字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#repeat-n-返回一个新字符串-不改变原字符串"}},[t._v("#")]),t._v(" repeat( n ) <返回一个新字符串，不改变原字符串>")]),t._v(" "),r("p",[t._v("将原字符串重复n次返回\nn为小数向下取整，负数报错（若是0到-1间的小数，则为0），NaN为0，字符串先转化为数字")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("“na”.repeat(2) //“nana”\n“na”.repeat(3.5) //“nanana”\n“na”.repeat(-1) //报错\n“na”.repeat(NaN) //“”\n“na”.repeat(-0.7) //“”\n“na”.repeat(“na”) //“”\n“na”.repeat(“3”) //“nanana”\n")])])]),r("h3",{attrs:{id:"padstart-number-string-返回一个新的字符串-不改变原字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#padstart-number-string-返回一个新的字符串-不改变原字符串"}},[t._v("#")]),t._v(" padStart(number, string) <返回一个新的字符串，不改变原字符串>")]),t._v(" "),r("h3",{attrs:{id:"padend-number-string-返回一个新的字符串-不改变原字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#padend-number-string-返回一个新的字符串-不改变原字符串"}},[t._v("#")]),t._v(" padEnd(number, string) <返回一个新的字符串，不改变原字符串>")]),t._v(" "),r("p",[t._v("number：补全的字符串的长度"),r("br"),t._v("\n情况一：原字符串长度大于或等于number，就不用补全了，返回原字符串"),r("br"),t._v("\n情况二：原字符串长度 + string的长度 > number，截去string超出的部分，然后补全字符串"),r("br"),t._v("\nstring：用于补全的字符串，这个参数如果没传，默认用一个空格字符代替来补全")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('"x".padStart(5, "ab"); //"ababx"\n"x".padEnd(4, "ab"); //"xaba"\n"xxxx".padStart(2, "ab"); //"xxxx"\n"xxxx".padEnd(2, "ab"); //"xxxx"\n"xx".padStart(6, "0123456789"); //"xx01234"\n"xxxx".padStart(6); //"xxxx " 后面加两个空格\n用途：为数值补全全指定位数　提示字符串格式\n"12".padStart(10, "0"); // "0000000012"\n"12".padStart(10, "YYYY-MM-DD") // "YYYY-MM-12"\n"09-12".padStart(10, "YYYY-MM-DD") // "YYYY-09-12"\n')])])])])}),[],!1,null,null,null);a.default=e.exports}}]);