(window.webpackJsonp=window.webpackJsonp||[]).push([[217],{686:function(t,v,_){"use strict";_.r(v);var n=_(32),l=Object(n.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),_("p",[t._v("树是n(n>=0)个节点的有限集"),_("br"),t._v("\n当n=0时，为空树"),_("br"),t._v("\n非空树的特点:")]),t._v(" "),_("ul",[_("li",[t._v("有且只有一个特定的根节点")]),t._v(" "),_("li",[t._v("当n>1时，其余节点可分为m(m>0)个互不相交的有限集，每个集合本身又是一个树，叫做根的子树")]),t._v(" "),_("li",[t._v("树的末端，没有子节点的节点叫叶子节点")]),t._v(" "),_("li",[t._v("节点的上级节点叫父节点")]),t._v(" "),_("li",[t._v("节点衍生出来的节点叫孩子节点")]),t._v(" "),_("li",[t._v("由同一个父节点衍生出来的节点叫兄弟节点")]),t._v(" "),_("li",[t._v("树的最大层级数(树的高度、深度)")])]),t._v(" "),_("h2",{attrs:{id:"用什么结构表示树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#用什么结构表示树"}},[t._v("#")]),t._v(" 用什么结构表示树")]),t._v(" "),_("ul",[_("li",[t._v("数组\n存稀疏树有点浪费空间")]),t._v(" "),_("li",[t._v("链表\n很直观")])])])}),[],!1,null,null,null);v.default=l.exports}}]);