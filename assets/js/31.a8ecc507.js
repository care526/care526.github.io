(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{494:function(t,e,n){"use strict";n.r(e);var a=n(32),o=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"other"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#other"}},[t._v("#")]),t._v(" other")]),t._v(" "),n("h2",{attrs:{id:"判断变量类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#判断变量类型"}},[t._v("#")]),t._v(" 判断变量类型")]),t._v(" "),n("ul",[n("li",[t._v("typeof"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("typeof '我是字符串'  // 'string'\ntypeof true  // 'boolean'\ntypeof 10  // 'number'\ntypeof Symbol()  // 'symbol'\ntypeof undefined  // 'undefined'\ntypeof null  // 'object'\ntypeof {}  // 'object'\ntypeof []  // 'object'\ntypeof (() => {})  // 'function'\n")])])]),t._v("对于判断是否是对象类型，不太适用")])]),t._v(" "),n("hr"),t._v(" "),n("ul",[n("li",[t._v("instanceof\n原理：测试构造函数的 prototype 是否出现在被检测对象的原型链上"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("[] instanceof Array  // true\n[] instanceof Object  // true\n({}) instanceof Object  // true\n(() => {}) instanceof Function  // true\n")])])]),t._v("问题：数组是对象的子类型，所以还是判断不出来")])]),t._v(" "),n("hr"),t._v(" "),n("ul",[n("li",[t._v("Object.prototype.toString.call()"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Object.prototype.toString.call({})  // '[object Object]'\nObject.prototype.toString.call([])  // '[object Array]'\nObject.prototype.toString.call(() => {})  // '[object Function]'\nObject.prototype.toString.call('我是一个字符串')  // '[object String]'\nObject.prototype.toString.call(10)  // '[object Number]'\nObject.prototype.toString.call(true)  // '[object Boolean]'\nObject.prototype.toString.call(Symbol())  // '[object Symbol]'\nObject.prototype.toString.call(null)  // '[object Null]'\nObject.prototype.toString.call(undefined)  // '[object Undefined]'\nObject.prototype.toString.call(new Date())  // '[object Date]'\nObject.prototype.toString.call(Math)  // '[object Math]'\nObject.prototype.toString.call(new Set())  // '[object Set]'\nObject.prototype.toString.call(new weakSet)  // '[object weakSet]'\nObject.prototype.toString.call(new Map())  // '[object MAp]'\nObject.prototype.toString.call(new WeakMap)  // '[object WeakMap]'\n")])])]),t._v("原理：\n"),n("ul",[n("li",[t._v("依托Object.prototype.toString()方法得到的对象内部属性[[Class]]")]),t._v(" "),n("li",[t._v("对于原始类型的数据进行了包装")]),t._v(" "),n("li",[t._v("区别null undefined 是内部做了处理")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('// 封装的获取变量类型的方法 Array Object Function String Boolean Undefined Null ...\nfunction type(data) {\n  let toString = Object.prototype.toString;\n  let dataType = toString\n        .call(data)\n        .replace(/\\[object\\s(.+)\\]/, "$1")\n        .toLowerCase()\n  return dataType\n}\n')])])])])]),t._v(" "),n("hr"),t._v(" "),n("ul",[n("li",[t._v("Array.isArray()\n判断是否是数组\nES5.1推出，IE6～8 不支持"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("if (!Array.isArray) {\n  Array.isArray = function(arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]'\n  }\n}\n")])])])])]),t._v(" "),n("h2",{attrs:{id:"call-apply-bind"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#call-apply-bind"}},[t._v("#")]),t._v(" call apply bind")]),t._v(" "),n("ul",[n("li",[t._v("call")]),t._v(" "),n("li",[t._v("apply")]),t._v(" "),n("li",[t._v("bind")])])])}),[],!1,null,null,null);e.default=o.exports}}]);