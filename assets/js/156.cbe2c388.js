(window.webpackJsonp=window.webpackJsonp||[]).push([[156],{622:function(t,a,s){"use strict";s.r(a);var r=s(32),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#包"}},[t._v("#")]),t._v(" 包")]),t._v(" "),s("h2",{attrs:{id:"环境变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环境变量"}},[t._v("#")]),t._v(" 环境变量")]),t._v(" "),s("ul",[s("li",[t._v('GOROOT="/usr/local/go"  # Go开发包目录')]),t._v(" "),s("li",[t._v('GOPATH="/home/davy/go"  # 工程目录')])]),t._v(" "),s("h2",{attrs:{id:"创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建"}},[t._v("#")]),t._v(" 创建")]),t._v(" "),s("h2",{attrs:{id:"引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用"}},[t._v("#")]),t._v(" 引用")]),t._v(" "),s("h3",{attrs:{id:"全路径-相对路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全路径-相对路径"}},[t._v("#")]),t._v(" 全路径｜相对路径")]),t._v(" "),s("p",[t._v("包的绝对路径就是“$GOROOT/src 或 $GOPATH/src”后面包的源码的全路径")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('import "lab/a"\nimport "../a"\n')])])]),s("h3",{attrs:{id:"引用格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用格式"}},[t._v("#")]),t._v(" 引用格式")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('import "fmt"  // 标准引用\nfmt.Println("xxx")\n\nimport F "fmt"  // 别名引用\nF.Println("xxx")\n\nimport . "fmt"  // 命名空间合并，引用\nPrintln("xxx")  // 直接使用\n\nimport _ "fmt"  //匿名导包，会执行包初始化 init 函数\n')])])]),s("h3",{attrs:{id:"导入多个包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#导入多个包"}},[t._v("#")]),t._v(" 导入多个包")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('import "./a"\nimport . "./b"\n')])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('import (\n  "./a"\n  . "./b"  // 合并命名空间\n  Casd "./c"  // 重命名\n)\n')])])]),s("h2",{attrs:{id:"包的结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#包的结构"}},[t._v("#")]),t._v(" 包的结构")]),t._v(" "),s("p",[t._v("小写开头的是内部变量｜函数，包外不可使用\n大写开头的是包外可使用的变量｜函数")]),t._v(" "),s("h2",{attrs:{id:"导包的机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#导包的机制"}},[t._v("#")]),t._v(" 导包的机制")]),t._v(" "),s("ul",[s("li",[t._v("环形引用会报错，程序的执行是无环的，单向的")]),t._v(" "),s("li",[t._v("包引用关系：main→A→B→C，那么这些包的 init() 函数调用顺序为：C.init→B.init→A.init→main")])])])}),[],!1,null,null,null);a.default=e.exports}}]);