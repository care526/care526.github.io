(window.webpackJsonp=window.webpackJsonp||[]).push([[250],{719:function(a,t,s){"use strict";s.r(t);var r=s(32),v=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[a._v("#")]),a._v(" 类")]),a._v(" "),s("p",[a._v("类是对象的模板")]),a._v(" "),s("h2",{attrs:{id:"属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[a._v("#")]),a._v(" 属性")]),a._v(" "),s("h2",{attrs:{id:"方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[a._v("#")]),a._v(" 方法")]),a._v(" "),s("h2",{attrs:{id:"修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[a._v("#")]),a._v(" 修饰符")]),a._v(" "),s("p",[a._v("abstract\npublic\nprivate")]),a._v(" "),s("h2",{attrs:{id:"访问控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#访问控制"}},[a._v("#")]),a._v(" 访问控制")]),a._v(" "),s("h3",{attrs:{id:"私有数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#私有数据"}},[a._v("#")]),a._v(" 私有数据")]),a._v(" "),s("p",[a._v("private")]),a._v(" "),s("h2",{attrs:{id:"封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[a._v("#")]),a._v(" 封装")]),a._v(" "),s("p",[a._v("将属性和方法合并到同有个实体中")]),a._v(" "),s("h2",{attrs:{id:"数据隐藏"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据隐藏"}},[a._v("#")]),a._v(" 数据隐藏")]),a._v(" "),s("p",[a._v("在面向对象的术语中，数据表现为属性，行为表现为方法。限制访问具体属性和（或)方法的行为叫作数据隐藏")]),a._v(" "),s("h2",{attrs:{id:"接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[a._v("#")]),a._v(" 接口")]),a._v(" "),s("p",[a._v("定义了类之间的交互方式"),s("br"),a._v("\n无需关心另一个类接口的具体实现")]),a._v(" "),s("h2",{attrs:{id:"继承-is-a"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#继承-is-a"}},[a._v("#")]),a._v(" 继承(is-a)")]),a._v(" "),s("p",[a._v("代码重用")]),a._v(" "),s("h3",{attrs:{id:"超类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#超类"}},[a._v("#")]),a._v(" 超类")]),a._v(" "),s("p",[a._v("也叫父类、基类。包含了继承自它的所有类的公共属性和行为")]),a._v(" "),s("h3",{attrs:{id:"子类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#子类"}},[a._v("#")]),a._v(" 子类")]),a._v(" "),s("p",[a._v("也叫孩子类、衍生类。是超类的扩展")]),a._v(" "),s("h3",{attrs:{id:"单继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单继承"}},[a._v("#")]),a._v(" 单继承")]),a._v(" "),s("p",[a._v("一个类只能有一个父类")]),a._v(" "),s("h3",{attrs:{id:"多继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多继承"}},[a._v("#")]),a._v(" 多继承")]),a._v(" "),s("p",[a._v("一个类有多个父类")]),a._v(" "),s("h2",{attrs:{id:"抽象类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽象类"}},[a._v("#")]),a._v(" 抽象类")]),a._v(" "),s("p",[a._v("包含抽象方法的类"),s("br"),a._v("\n继承抽象类的非抽象类必须实现抽象类中的抽象方法")]),a._v(" "),s("h2",{attrs:{id:"多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[a._v("#")]),a._v(" 多态")]),a._v(" "),s("p",[a._v("每个子类对于相同的父类接口的不同实现就是多态")]),a._v(" "),s("h3",{attrs:{id:"重载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重载"}},[a._v("#")]),a._v(" 重载")]),a._v(" "),s("p",[a._v("子类覆盖父类中的一个实现")]),a._v(" "),s("h2",{attrs:{id:"组合-has-a"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组合-has-a"}},[a._v("#")]),a._v(" 组合(has-a)")]),a._v(" "),s("p",[a._v("使用其他对象来构建或结合成新的对象")])])}),[],!1,null,null,null);t.default=v.exports}}]);