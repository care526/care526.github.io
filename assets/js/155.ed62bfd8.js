(window.webpackJsonp=window.webpackJsonp||[]).push([[155],{621:function(a,t,s){"use strict";s.r(t);var e=s(32),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"other"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#other"}},[a._v("#")]),a._v(" other")]),a._v(" "),s("h2",{attrs:{id:"注释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[a._v("#")]),a._v(" 注释")]),a._v(" "),s("p",[a._v("// 我是单行注释\n/* 我是多行注释 */")]),a._v(" "),s("h2",{attrs:{id:"类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[a._v("#")]),a._v(" 类型")]),a._v(" "),s("p",[a._v("int 数值\nstring 字符串\nfloat32 32位浮点切片\nstruct 结构体\nfunc() bool 一个返回值为布尔的函数")]),a._v(" "),s("h2",{attrs:{id:"变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[a._v("#")]),a._v(" 变量")]),a._v(" "),s("h3",{attrs:{id:"类型-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型-2"}},[a._v("#")]),a._v(" 类型")]),a._v(" "),s("p",[a._v("bool\nstring  默认为''\nint  int8  int16  int32(rune)  int64  默认为0\nuint  uint8(byte)  uint16  uint32  uint64  uintptr  默认为0\nfloat32  float64  默认为0.0\ncomplex64  complex128")]),a._v(" "),s("h3",{attrs:{id:"声明-赋值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#声明-赋值"}},[a._v("#")]),a._v(" 声明 / 赋值")]),a._v(" "),s("p",[a._v("在声明变量的时候可以加上类型也可以不加,变量在申明的时候都被Go初始化了")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('var care = 1  // 数值\nvar care = "string"  // 字符串\nvar care int = 1  // 数值\nvar care string = "string"  // 字符串\ncare := 1  // 数值 (简便写法,只能对于未申明的变量)\ncare := "string"  // 字符串\n// var后面的()里声明多个变量\nvar (\n  crae int = 1\n  crae string = "asd"\n)\n')])])]),s("p",[a._v("_ 匿名变量")]),a._v(" "),s("h2",{attrs:{id:"常量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常量"}},[a._v("#")]),a._v(" 常量")]),a._v(" "),s("h2",{attrs:{id:"函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[a._v("#")]),a._v(" 函数")]),a._v(" "),s("h2",{attrs:{id:"流程控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#流程控制"}},[a._v("#")]),a._v(" 流程控制")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("if XXX {\n  XXX\n} else if XXX {\n  XXX\n} else {\n  XXX\n}\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("if XXX; XXX {  // 可以在判断的表达式的前面加一个语句\n    XXX\n}\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("for ; step > 0; step-- {\n  XXX\n}\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("for {\n  XXX  // 在代码里面做判断,用break跳出\n}\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("for i <= 10 {\n  XXX\n}\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('switch a {  // a是变量\ncase "hello":\n    XXX\ncase "world":\n    XXX\ndefault:\n    XXX\n}\n')])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('switch a {  // 一支多值\ncase "mum", "daddy":\n  XXX\n}\n')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);