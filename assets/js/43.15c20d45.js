(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{506:function(e,t,a){"use strict";a.r(t);var s=a(32),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dom"}},[e._v("#")]),e._v(" DOM")]),e._v(" "),a("h2",{attrs:{id:"创建节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建节点"}},[e._v("#")]),e._v(" 创建节点")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('document.createTextNode("文本") 文本节点的创建   \ndocument.createElement("div") Element节点的创建  \ncloneNode() 节点调用该方法，返回该节点的全新副本，传true参数，可深拷贝，递归的复制其后代的所有节点   \n')])])]),a("p",[e._v("将节点添加到页面的几种方式")]),e._v(" "),a("ol",[a("li",[e._v("createElement\n创建节点，并添加到文档上")]),e._v(" "),a("li",[e._v("innerHTM\n"),a("code",[e._v("DOM.innerHTML = 'XXX'")])]),e._v(" "),a("li",[e._v("cloneNode\n克隆节点，并添加到文档上\n"),a("code",[e._v("DOM.cloneNode")])]),e._v(" "),a("li",[e._v("DocumentFragment\n将创建的节点先添加到fragment对象上，再将fragment对象添加到文档上\n"),a("code",[e._v("document.createDocumentFragment();")])])]),e._v(" "),a("h2",{attrs:{id:"插入节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入节点"}},[e._v("#")]),e._v(" 插入节点")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('parent.appendChild("newNode") 将newChild插入到parent节点子节点的最后面   \nparent.insertBefore(newNode,childNode) 将newNode插入到parent的这个childNode子节点的前面，如果第二个参数是null，则将节点插入到parent子节点的最后面    \n')])])]),a("p",[e._v("添加结点（可以是文本结点或DOM结点）"),a("br"),e._v("\nA.appendChild(B):"),a("br"),e._v("\n将B添加到A的子元素的最后一个位置"),a("br"),e._v("\nparent.insertBefore(newNode, exitsNode):"),a("br"),e._v("\ninsertAdjacentElement"),a("br"),e._v("\n它包括两个参数，其中第二个参数是要加的子节点，核心在于第一个参数，有如下的取值"),a("br"),e._v("\nbeforebegin:把第二个参数加到当前节点的前面"),a("br"),e._v("\nafterend：把第二个参数加到当前节点的后面"),a("br"),e._v("\nafterbegin：把第二个参数加到当前节点的第一个子节点位置"),a("br"),e._v("\nbeforeend：把第二个参数加到当前节点的最后一个节点的位置")]),e._v(" "),a("h2",{attrs:{id:"获取文档节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取文档节点"}},[e._v("#")]),e._v(" 获取文档节点")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('通过ID document.getElementById("id")\n通过name document.getElementsByName("name")\n通过标签名 document.getElementsByTagName("div")\n通过class document.getElementsByClassName("class")\n通过css选择器 document.querySelectorAll()\ndocument.querySelector(\'#id p\')\n')])])]),a("p",[e._v("ps: 如果获取到的节点有多个，得到的是一个类数组，不能直接使用Array的API，可以用Array.from()转化一下")]),e._v(" "),a("h2",{attrs:{id:"文档结构的而遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文档结构的而遍历"}},[e._v("#")]),e._v(" 文档结构的而遍历")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("parentNode 该节点的父节点  \nchildNodes 该节点的所有子节点（只读的类数组对象）  \nfirstChild 该节点的子节点中的第一个  \nlastChild 该节点的子节点中的最后一个  \nnextSibling 该节点的下一个兄弟节点  \npreviousSibling 该节点的上一个兄弟节点  \nnodeType 该节点的类型     \nnodeValue 该节点的文本内容  \nnodeName 该节点的标签名    \n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("firstElementChild 该节点的第一个Element节点  \nlastElementChild 该节点的最后一个Element节点  \nnextElementSibling 该节点的下一个兄弟Element节点   \npreviousElementSibling 该节点的上一个兄弟Element节点   \n")])])]),a("h2",{attrs:{id:"层级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#层级"}},[e._v("#")]),e._v(" 层级")]),e._v(" "),a("p",[e._v("parentDom.contains.(childDom) === true 检查childDom是否是parentDom的子孙节点")]),e._v(" "),a("h2",{attrs:{id:"删除节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除节点"}},[e._v("#")]),e._v(" 删除节点")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("parent.removeChild(node) 删除parent下的node子节点  \nparent.replaceChild(newNode,node) 将parent下的node子节点用newNode节点代替  \n")])])]),a("h2",{attrs:{id:"定位相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定位相关"}},[e._v("#")]),e._v(" 定位相关")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("DOM.offsetWidth  自己的宽度  \nDOM.offsetHeight 自己的高度  \nDOM.offsetTop    相对于父元素的顶部的距离   \nDOM.offsetLeft   相对于父元素的左边的距离   \nDOM.offsetParent  是当前DOM的有定位属性的第一个上层元素,如果不存在返回null，有浏览器兼容性问题(以后在补充)     \nDOM.getBoundingClientRect()  获得的数据结构 {\n  top: '元素顶部相对于视口顶部的距离',\n  bottom: '元素底部相对于视口顶部的距离',\n  left: '元素左边相对于视口左边的距离',\n  right: '元素右边相对于视口左边的距离',\n  height: '元素高度',\n  width: '元素宽度'\n}\n")])])]),a("h2",{attrs:{id:"类名相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类名相关"}},[e._v("#")]),e._v(" 类名相关")]),e._v(" "),a("p",[e._v("DOM.className  等于下面classList的value  'a b'，可以修改")]),e._v(" "),a("ul",[a("li",[e._v("DOM.className += ' c'  添加类名c，c前面有个空格(其实就是修改HTML中的字符串)")])]),e._v(" "),a("p",[e._v("DOM.classList  当前DOM元素的class名的类数组 {0: 'a', 1: 'b', length: 2, value: 'a b'}")]),e._v(" "),a("ul",[a("li",[e._v("DOM.classList.add(newClassName )  添加newClassName类名，如果有取消添加")]),e._v(" "),a("li",[e._v("DOM.classList.remove(oldClassName)  移除oldClassName类名")]),e._v(" "),a("li",[e._v("DOM.classList.contains(oldClassName)  测试是否存在oldClassName类名，返回true/false")]),e._v(" "),a("li",[e._v("DOM.classList.toggle(className)  如果classList中存在给定的值，删除它，否则，添加它")]),e._v(" "),a("li",[e._v("DOM.classList.replace(oldClassName, newClassName)  类名替换")])]),e._v(" "),a("h2",{attrs:{id:"属性相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性相关"}},[e._v("#")]),e._v(" 属性相关")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('setAttribute("XXX","XXX") 属性名 属性值   \nhasAttribute("XXX") 检测是否存在某个属性  \nremoveAttribute("XXX") 移除某个属性   \n')])])]),a("h3",{attrs:{id:"滚动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#滚动"}},[e._v("#")]),e._v(" 滚动")]),e._v(" "),a("ul",[a("li",[e._v("DOM.scrollIntoView()\n滚动DOM的顶端到滚动可视区的顶端"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('DOM.scrollIntoView(true)  // 等同于不传\nDOM.scrollIntoView(false)  // 同上，底端\nDOM.scrollIntoView({\n  block:    "start" | "end",  // 定义滚动到顶部还是底部\n  behavior: "auto"  | "instant" | "smooth"  // 定义动画效果\n})\n')])])])]),e._v(" "),a("li",[e._v("DOM.scrollTop = Number\n指定滚动条到距顶端number的位置，如果数值过大，就到底部了")]),e._v(" "),a("li",[e._v("当前DOM是否在视窗中出现"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 定义行为\nvar intersectionObserver = new IntersectionObserver(function(DOM) {\n  // intersectionRatio表示和根元素的交叉，0-1之间的值\n  if (DOM.intersectionRatio <= 0) {\n    // 不在视窗之内，做点什么\n  } else {\n    // 在视窗之内，做点什么\n  }\n})\n// 设置监听的元素\nintersectionObserver.observe(DOM)\n")])])])])])])}),[],!1,null,null,null);t.default=n.exports}}]);