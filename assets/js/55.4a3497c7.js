(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{518:function(e,t,n){"use strict";n.r(t);var r=n(32),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"events"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[e._v("#")]),e._v(" events")]),e._v(" "),n("h2",{attrs:{id:"引用模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#引用模块"}},[e._v("#")]),e._v(" 引用模块")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const events = require('events')\n")])])]),n("h2",{attrs:{id:"以下实例都是和下面代码一起的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#以下实例都是和下面代码一起的"}},[e._v("#")]),e._v(" 以下实例都是和下面代码一起的")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const EventEmitter = require('events');\nclass MyEmitter extends EventEmitter {};\nconst myEmitter = new MyEmitter();\n")])])]),n("h2",{attrs:{id:"eventemitter-on-eventname-listener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter-on-eventname-listener"}},[e._v("#")]),e._v(" eventEmitter.on(eventName, listener)")]),e._v(" "),n("p",[e._v("注册监听器")]),e._v(" "),n("ul",[n("li",[e._v("是eventEmitter.addListener(eventName, listener)的别名")]),e._v(" "),n("li",[e._v("返回监听器的实例对象，可以链式调用")])]),e._v(" "),n("h2",{attrs:{id:"eventemitter-once-eventname-listener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter-once-eventname-listener"}},[e._v("#")]),e._v(" eventEmitter.once(eventName, listener)")]),e._v(" "),n("p",[e._v("注册使用一次的监听器")]),e._v(" "),n("ul",[n("li",[e._v("当事件被触发的时候，先移除监听器，然后再执行回调函数")]),e._v(" "),n("li",[e._v("返回监听器的实例对象，可以链式调用")])]),e._v(" "),n("h2",{attrs:{id:"emitter-prependlistener-eventname-listener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#emitter-prependlistener-eventname-listener"}},[e._v("#")]),e._v(" emitter.prependListener(eventName, listener)")]),e._v(" "),n("p",[e._v("可将事件监听器添加到监听器数组的开头")]),e._v(" "),n("ul",[n("li",[e._v("返回监听器的实例对象，可以链式调用")])]),e._v(" "),n("h2",{attrs:{id:"emitter-prependoncelistener-eventname-listener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#emitter-prependoncelistener-eventname-listener"}},[e._v("#")]),e._v(" emitter.prependOnceListener(eventName, listener)")]),e._v(" "),n("p",[e._v("可将事件监听器添加到监听器数组的开头(执行一次的监听器)")]),e._v(" "),n("ul",[n("li",[e._v("返回监听器的实例对象，可以链式调用")])]),e._v(" "),n("h2",{attrs:{id:"eventemitter-off-eventname-listener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter-off-eventname-listener"}},[e._v("#")]),e._v(" eventEmitter.off(eventName, listener)")]),e._v(" "),n("p",[e._v("移除事件上的监听器\n是eventEmitter.removeListener(eventName, listener)的别名")]),e._v(" "),n("h2",{attrs:{id:"eventemitter-removealllisteners-eventname"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter-removealllisteners-eventname"}},[e._v("#")]),e._v(" eventEmitter.removeAllListeners([eventName])")]),e._v(" "),n("p",[e._v("移除全部监听器或全部监听器")]),e._v(" "),n("ul",[n("li",[e._v("返回监听器的实例对象，可以链式调用")])]),e._v(" "),n("h2",{attrs:{id:"eventemitter-removelistener-eventname-listener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter-removelistener-eventname-listener"}},[e._v("#")]),e._v(" eventEmitter.removeListener(eventName, listener)")]),e._v(" "),n("p",[e._v("移除事件监听器数组中指定的listener")]),e._v(" "),n("ul",[n("li",[e._v("最多只能移除一个监听器，如果有多个需要多次调用")]),e._v(" "),n("li",[e._v("再事件触发的过程中，不能移除监听器")]),e._v(" "),n("li",[e._v("返回监听器的实例对象，可以链式调用")])]),e._v(" "),n("h2",{attrs:{id:"自带的一些规定好名字的事件-但是还要注册"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自带的一些规定好名字的事件-但是还要注册"}},[e._v("#")]),e._v(" 自带的一些规定好名字的事件，但是还要注册")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("eventEmitter.on('newListener', listener);  // 当有新的事件注册时触发\neventEmitter.on('removeListener', listener);  // 当有事件被移除时触发\neventEmitter.on('error', listener);  // 当有error事件触发时\n")])])]),n("h2",{attrs:{id:"eventemitter-emit-eventname-args"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter-emit-eventname-args"}},[e._v("#")]),e._v(" eventEmitter.emit(eventName[, ...args])")]),e._v(" "),n("p",[e._v("触发事件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("myEmitter.on('event', function (a, b) {\n  console.log(this);  // this指向的是事件触发器实例对象 => myEmitter\n})\n// 如果回调函数使用ES6的箭头函数，this不会绑定事件触发器实例对象\nmyEmitter.emit('event', 'a', 'b');\n")])])]),n("h2",{attrs:{id:"eventemitter-setmaxlisteners-n"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter-setmaxlisteners-n"}},[e._v("#")]),e._v(" eventEmitter.setMaxListeners(n)")]),e._v(" "),n("p",[e._v("设置单个实例的最大监听器数量\n每个事件默认可以注册10个监听器\nEventEmitter.defaultMaxListeners 设置该属性可以修改所有实例的最大监听器的数量")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("myEmitter.setMaxListeners(20);  // 设置单个(再实例上设置)\nMyEmitter.defaultMaxListeners = 20;  // 设置所有(再类上设置)\n\n")])])]),n("h2",{attrs:{id:"eventemitter-getmaxlisteners"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter-getmaxlisteners"}},[e._v("#")]),e._v(" eventEmitter.getMaxListeners()")]),e._v(" "),n("p",[e._v("返回当前监听器最大限制的数值")]),e._v(" "),n("h2",{attrs:{id:"eventemitter-eventnames"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter-eventnames"}},[e._v("#")]),e._v(" eventEmitter.eventNames()")]),e._v(" "),n("p",[e._v("返回已注册监听器的事件名的数组")]),e._v(" "),n("h2",{attrs:{id:"eventemitter-listenercount-eventname"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter-listenercount-eventname"}},[e._v("#")]),e._v(" eventEmitter.listenerCount(eventName)")]),e._v(" "),n("p",[e._v("返回正在监听事件上监听器的数量")]),e._v(" "),n("h2",{attrs:{id:"eventemitter-listeners-eventname"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter-listeners-eventname"}},[e._v("#")]),e._v(" eventEmitter.listeners(eventName)")]),e._v(" "),n("p",[e._v("返回正在监听事件上监听器数组的副本")]),e._v(" "),n("h2",{attrs:{id:"eventemitter-rawlisteners-eventname"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter-rawlisteners-eventname"}},[e._v("#")]),e._v(" eventEmitter.rawListeners(eventName)")]),e._v(" "),n("p",[e._v("返回 eventName 事件的监听器数组的拷贝")]),e._v(" "),n("ul",[n("li",[e._v("直接执行数组里的函数，会移除监听器")]),e._v(" "),n("li",[e._v("调用数组函数的listener()，函数会执行，但是监听器不会被移除")])])])}),[],!1,null,null,null);t.default=a.exports}}]);